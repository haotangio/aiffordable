import {Pool} from 'pg'
import {ColumnType, Generated, Kysely, PostgresDialect} from 'kysely'
// import {Generated, ColumnType, sql} from 'kysely';
// // import { createPool } from '@vercel/postgres';
//
interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  first_name: string;

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null;
}

//
// // Keys of this interface are table names.
interface Database {
  users: UserTable;
}

//
// // const db = createKysely<Database>();
//
// export async function testKysely() {
//   // const pool = createPool({
//   //   connectionString: "postgresql://postgres:123456@localhost:5432/aiffordable_dev",
//   //   // user: 'postgres',
//   //   // database: 'aiffordable_dev',
//   //   // password: '123456',
//   //   // port: 5432,
//   //   // host: 'localhost',
//   //   // max: 10,   // Maximum number of connections in the pool
//   //   // idleTimeoutMillis: 30000,  // Close idle clients after 30 seconds
//   // });
//   try {
//     console.log(`Created "users" aaaaa`);
//
//     const db = createKysely<Database>({
//       connectionString: "postgresql://postgres:123456@localhost:5432/aiffordable_dev",
//     });
//     console.log(`Created "users" table1111`);
//
//     const createTable = await db.schema
//       .createTable('users')
//       .ifNotExists()
//       .addColumn('id', 'serial', (cb) => cb.primaryKey())
//       .addColumn('name', 'varchar(255)', (cb) => cb.notNull())
//       .addColumn('email', 'varchar(255)', (cb) => cb.notNull().unique())
//       .addColumn('image', 'varchar(255)')
//       .addColumn('createdAt', sql`timestamp with time zone`, (cb) =>
//         cb.defaultTo(sql`current_timestamp`)
//       )
//       .execute();
//     console.log(`Created "users" table`);
//   } catch (error) {
//     console.log(`Error: ${error}`);
//     console.log(error);
//   }
//
//   // const likes = 100;
//
//   // const { rows, fields } =
//   //   await pool.sql`SELECT * FROM posts;`;
//   // await db
//   //   .insertInto('user')
//   //   .values({
//   //     first_name: 'John',
//   //     gender: 'male',
//   //     last_name: 'Doe',
//   //   })
//   //   .execute();
// }

const dialect = new PostgresDialect({
  pool: new Pool({
    database: 'aiffordable_dev',
    host: 'localhost',
    user: 'postgres',
    password: '123456',
    port: 5432,
    max: 10,
  })
})

// Database interface is passed to Kysely's constructor, and from now on, Kysely
// knows your database structure.
// Dialect is passed to Kysely's constructor, and from now on, Kysely knows how
// to communicate with your database.
export const db = new Kysely<Database>({
  dialect,
});

export async function testKysely() {
  // const pool = createPool({
  //   connectionString: "postgresql://postgres:123456@localhost:5432/aiffordable_dev",
  //   // user: 'postgres',
  //   // database: 'aiffordable_dev',
  //   // password: '123456',
  //   // port: 5432,
  //   // host: 'localhost',
  //   // max: 10,   // Maximum number of connections in the pool
  //   // idleTimeoutMillis: 30000,  // Close idle clients after 30 seconds
  // });
  // try {
  //   // console.log(`Created "users" aaaaa`);
  //   //
  //   // const db = createKysely<Database>({
  //   //   connectionString: "postgresql://postgres:123456@localhost:5432/aiffordable_dev",
  //   // });
  //   // console.log(`Created "users" table1111`);
  //
  //   // const createTable = await db.schema
  //   //   .createTable('users')
  //   //   .ifNotExists()
  //   //   .addColumn('id', 'serial', (cb) => cb.primaryKey())
  //   //   .addColumn('name', 'varchar(255)', (cb) => cb.notNull())
  //   //   .addColumn('email', 'varchar(255)', (cb) => cb.notNull().unique())
  //   //   .addColumn('image', 'varchar(255)')
  //   //   .addColumn('createdAt', sql`timestamp with time zone`, (cb) =>
  //   //     cb.defaultTo(sql`current_timestamp`)
  //   //   )
  //   //   .execute();
  //   console.log(`Created "users" table`);
  // } catch (error) {
  //   console.log(`Error: ${error}`);
  //   console.log(error);
  // }

  // const likes = 100;

  // const { rows, fields } =
  //   await pool.sql`SELECT * FROM posts;`;
  await db
    .insertInto('users')
    .values({
      first_name: 'John',
      last_name: 'Doe',
    })
    .execute();
}
